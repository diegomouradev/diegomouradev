{"version":3,"sources":["./src/environments/environment.ts","./src/app/tile/tile.component.ts","./src/app/tile/tile.component.html","./src/app/grid/grid.component.ts","./src/app/grid/grid.component.html","./src/app/app.component.ts","./src/app/app.component.html","./src/app/board.service.ts","./src/app/app.module.ts","./src/app/constants.ts","./src/app/fill-grid.service.ts","./src/app/app-routing.module.ts","./src/main.ts","./$_lazy_route_resource lazy namespace object"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport { ITile } from '../grid/grid.model'\n\n@Component({\n  selector: 'app-tile',\n  templateUrl: './tile.component.html',\n  styleUrls: ['./tile.component.scss']\n})\nexport class TileComponent implements OnInit {\n  @Input()\n  tile: ITile;\n\n  \n\n  constructor() { \n  }\n\n  ngOnInit(): void {\n    const letter = this.tile.letter;\n  }\n\n}\n","<span class=\"tile__content\">{{tile.letter}}</span>\n","import { Component, OnInit } from '@angular/core';\nimport { GRID_SIZE, WORD_LIST } from '../constants';\nimport { BoardService } from '../board.service';\nimport { IBoardGenerator, ITile } from './grid.model'\n\n@Component({\n  selector: 'app-grid',\n  templateUrl: './grid.component.html',\n  styleUrls: ['./grid.component.scss'],\n  providers: [BoardService]\n})\nexport class GridComponent implements OnInit {\n  gameGrid: ITile[][];\n \n\n  constructor(private BoardService: BoardService) {\n  }\n/* testing */\n  ngOnInit(): void {\n    this.gameGrid = this.BoardService.generateBoard(GRID_SIZE, WORD_LIST);\n  }  \n  /* test 2 */\n}\n","<div class=\"grid__row\" *ngFor=\"let row of gameGrid\">\n  <div class=\"grid__tile\" *ngFor=\"let tile of row\">\n    <span class=\"grid__tile--content\">{{tile.letter}}</span>\n  </div>\n</div>","import { Component } from '@angular/core';\n\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss']\n})\nexport class AppComponent {\n  title = 'Word Search Game';\n}\n","<h1>{{title}}</h1>\n<app-grid></app-grid>","import { Injectable } from '@angular/core';\nimport { FillGridService } from './fill-grid.service';\nimport { IBoardGenerator, ITile } from './grid/grid.model';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class BoardService implements IBoardGenerator{\n\n  constructor(private readonly DiegoGridService: FillGridService) { \n  }\n  generateBoard(gridSize: number, wordList: string[]): ITile[][] {\n    return this.DiegoGridService.generateBoard(gridSize, wordList);\n  }\n}\n","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\n\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\nimport { GridComponent } from './grid/grid.component';\nimport { TileComponent } from './tile/tile.component';\n\n\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    GridComponent,\n    TileComponent\n  ],\n  imports: [\n    BrowserModule,\n    AppRoutingModule\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","// Const declaration\nexport const GRID_WIDTH: number = 20;\nexport const GRID_HEIGHT: number = 20;\nexport const GRID_SIZE: number = 20;\nexport const DIRECTIONS: string[] = [\n  'horizontal',\n  'vertical',\n  'diagonal'\n]\nexport const WORD_LIST: string[] = [\n  'Ditto',\n  'Arbok',\n  'Eevee',\n  'Entei',\n  'Gloom',\n  'Ekans',\n  'Pichu',\n  'Aipom',\n  'Duduo',\n  'Pikachu',\n  'bulbasaur',\n  'Squirtle',\n  'Charmander'\n];\nexport const ALPHABET: string = 'abcdefghijklmnoprstuvwy'\n\n\n","import { Injectable } from '@angular/core';\nimport { WORD_LIST, GRID_WIDTH, GRID_HEIGHT, DIRECTIONS, ALPHABET, GRID_SIZE } from './constants';\nimport { ITile , IBoardGenerator, ILocation  } from './grid/grid.model';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class FillGridService implements IBoardGenerator {\n  grid: ITile[][] = []\n  \n  alphabet: string = ALPHABET\n  words: string[] = WORD_LIST \n  gridWidth: number = GRID_WIDTH\n  gridHeight: number = GRID_HEIGHT\n  gridSize: number = GRID_SIZE\n  directions: string[] = DIRECTIONS\n  \n  constructor() { }\n  \n  generateBoard(gridSize: number, wordList: string[]): ITile[][] {\n    this.words = wordList;\n    this.gridSize = gridSize;\n    this.generateGrid();\n    this.placeWord();\n    return this.grid;\n  }\n  \n  // Given the direction calculates the next Square.\n  nextTile: object = {\n    horizontal: ( indexColumn: number,indexRow: number, distance:number) => ( {indexColumn: indexColumn + distance, indexRow } ),\n    vertical: ( indexColumn: number,indexRow: number, distance:number) => ( { indexColumn , indexRow: indexRow  + distance } ),\n    diagonal: ( indexColumn: number,indexRow: number, distance:number) => ( { indexColumn: indexColumn + distance, indexRow: indexRow + distance})\n  }\n\n  // given the grid dimensions, and the tile position check if the word fits.\n  isDirectionValid: object = {\n    horizontal: ( width: number, height: number, indexColumn:number, indexRow:number, wordLength:number ) => width >= indexColumn + wordLength,\n    vertical: ( width: number, height: number, indexColumn:number, indexRow:number, wordLength:number ) => height >= indexRow + wordLength,\n    diagonal: ( width: number, height: number, indexColumn:number, indexRow:number, wordLength:number ) => (width >= indexColumn + wordLength) && (height >= indexRow + wordLength)\n  }\n\n  // If the result of isDirectionValid returns false.\n  skipTiles: object = {\n    horizontal: (indexColumn: number, indexRow: number, wordLength: number) => ({indexColumn: indexColumn = 0, indexRow: indexRow + 1}),\n    vertical: (indexColumn: number, indexRow: number, wordLength: number) => ({indexColumn: indexColumn = 0, indexRow: indexRow + 100}),\n    diagonal: ( indexColumn:number, indexRow: number, wordLength: number) => ({indexColumn: indexColumn = 0, indexRow: indexRow + 1})\n  }\n  \n  // Generate grid of empty tiles.\n  generateGrid(): void {\n    for(let i=0; i < this.gridHeight; i++) {\n      this.grid.push([]);\n      for(let j=0; j< this.gridWidth; j++) {\n        this.grid[i].push({letter:'_'});\n      }\n    }\n  }\n  \n  pickRandomWord(): string {\n    let length = this.words.length;\n    let randomWord = this.words.splice((Math.floor(Math.random() * length)), 1);\n    return randomWord[0];\n  }\n\n  // Find all available locations to place the word in every direction.\n  getAvailableLocations(word): ILocation[] {\n\n    const locations: ILocation[] = [];\n    const wordLength = word.length;\n\n    for( let j = 0; j < this.directions.length; j++){\n\n      const direction = this.directions[j];\n      const checkDirection = this.isDirectionValid[direction];\n      const nextTile = this.nextTile[direction];\n      let indexColumn = 0;\n      let indexRow = 0; \n\n      while( indexRow < this.gridHeight) {\n        // check if the word fits in the space available at all.\n        if(checkDirection(this.gridWidth, this.gridHeight, indexColumn, indexRow, wordLength )) {\n          // If it fits, check the next tile for the length of the word to make sure words don't overlap.\n          let isOverlap = this.checkForOverlap(word, indexColumn, indexRow, nextTile);\n\n          if(isOverlap === 0) {\n            locations.push({ indexColumn, indexRow, direction});\n          }\n          indexColumn++;\n          if (indexColumn >= this.gridWidth) {\n            indexColumn = 0;\n            indexRow++;\n          }\n        } else {\n          let skipDirection = this.skipTiles[direction];\n          skipDirection = skipDirection(indexColumn, indexRow, wordLength);\n          indexColumn = skipDirection.indexColumn;\n          indexRow = skipDirection.indexRow;\n        }\n      }\n    }\n    return locations;\n  };\n\n  checkForOverlap( word, indexColumn, indexRow, getNextTile ): number {\n    let overlap: number = 0;\n\n    for(let k = 0; k < word.length; k++) {\n      let nextTile = getNextTile( indexColumn, indexRow, k );\n      let tile = this.grid[nextTile.indexRow][nextTile.indexColumn];\n\n      if(tile.letter === '_') {\n        overlap = overlap;\n      } else {\n        overlap--;\n      }\n    }\n    return overlap;\n  }\n\n  placeWord(): ITile[][] {\n    while(this.words.length >= 1) {\n      // get random word to place in the grid.\n      const word: string = this.pickRandomWord();\n      // get all available locations for placing the word.\n      const locations = this.getAvailableLocations(word);\n      // select available locations at random.\n      const randomLocation: ILocation = locations[Math.floor(Math.random() * locations.length)];\n      // place word in the selected location.\n      this.placeWordInGrid( word, randomLocation);\n    }\n    return this.grid;\n  }\n  \n  placeWordInGrid( word: string, randomLocation: ILocation ): void {\n    for (let i = 0, length = word.length; i < length; i++) {\n      let next = this.nextTile[randomLocation.direction];\n      next = next(randomLocation.indexColumn, randomLocation.indexRow, i);\n      let tile: ITile = {\n        letter: word[i],\n        indexRow: next.indexRow,\n        indexColumn: next.indexColumn,\n        isWord: true, \n        isSelected: false\n      };\n      this.grid[next.indexRow][next.indexColumn] = tile;\n    }\n  };\n  \n};\n","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nconst routes: Routes = [];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n","function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"zn8P\";"],"sourceRoot":"webpack:///"}